// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-1.1.x"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id         Int       @id @default(autoincrement())
  emailHash  String    @unique
  email      String?
  verifiedAt DateTime?
  isAdmin    Boolean   @default(false)
  createdAt  DateTime  @default(now())
  courseId   Int?
  course     Course?   @relation(fields: [courseId], references: [id])

  magicLinkTokens MagicLinkToken[]
  sessions        Session[]
  reviews         Review[]
  reports         Report[]
}

model MagicLinkToken {
  id        Int       @id @default(autoincrement())
  userId    Int
  tokenHash String    @unique
  purpose   String?   @default("signin")
  createdAt DateTime  @default(now())
  expiresAt DateTime
  usedAt    DateTime?
  requestIp String?
  userAgent String?

  user User @relation(fields: [userId], references: [id])
}

model Session {
  id               Int       @id @default(autoincrement())
  userId           Int
  sessionTokenHash String    @unique
  createdAt        DateTime  @default(now())
  expiresAt        DateTime
  revokedAt        DateTime?

  user User @relation(fields: [userId], references: [id])
}

model Professor {
  id   Int    @id @default(autoincrement())
  name String

  professorSubjects Professor_Subject[]
}

model Subject {
  id   Int    @id @default(autoincrement())
  name String

  professorSubjects Professor_Subject[]
}

model Professor_Subject {
  id          Int @id @default(autoincrement())
  professorId Int
  subjectId   Int

  professor Professor @relation(fields: [professorId], references: [id])
  subject   Subject   @relation(fields: [subjectId], references: [id])
  reviews   Review[]

  @@unique([professorId, subjectId])
}

model Review {
  id                 Int      @id @default(autoincrement())
  professorSubjectId Int
  userId             Int?
  review             String
  createdAt          DateTime @default(now())
  didaticQuality     Int?
  materialQuality    Int?
  examsDifficulty    Int?
  personality        Int?
  requiresPresence   Boolean?
  examMethod         String?
  anonymous          Boolean  @default(false)

  professorSubject Professor_Subject @relation(fields: [professorSubjectId], references: [id])
  user             User?             @relation(fields: [userId], references: [id])
}

model Course {
  id   Int    @id
  name String @unique

  users User[]
}

model Report {
  id         Int      @id @default(autoincrement())
  userId     Int
  experience String
  suggestion String
  createdAt  DateTime @default(now())

  user User @relation(fields: [userId], references: [id])
}
